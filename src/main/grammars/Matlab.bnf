{
  parserClass="com.github.guillaumetaffin.matlabintellij.lang.parser.MatlabParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Matlab"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.guillaumetaffin.matlabintellij.lang.psi"
  psiImplPackage="com.github.guillaumetaffin.matlabintellij.lang.psi.impl"

  elementTypeHolderClass="com.github.guillaumetaffin.matlabintellij.lang.psi.MatlabTypes"
  elementTypeClass="com.github.guillaumetaffin.matlabintellij.lang.psi.MatlabElementType"
  tokenTypeClass="com.github.guillaumetaffin.matlabintellij.lang.psi.MatlabTokenType"

  parserImports=[
        "static com.github.guillaumetaffin.matlabintellij.lang.psi.Tokens.*"
  ]

  generateTokens=false

  tokens = [
    SEMICOLON=";"
    INF="Inf"
    NAN="NaN"
    STRING_LITERAL="regexp:'([^']|'')*'|\"([^\"]|\"\")*\""
    DECIMAL_LITERAL="regexp:\b(\d+)(\.\d+)?([eE][+-]?\d+)?\b"
    HEXADECIMAL_LITERAL="regexp:\b0[xX][0-9a-fA-F]+\b"
    BINARY_LITERAL="regexp:\b0[bB][01]+\b"
    IMAGINARY_LITERAL="regexp:\b(\d+)?(\.\d+)?([eE][+-]?\d+)?[ij]\b"
    LINE_COMMENT="regexp:%.*"
    MULTI_LINE_COMMENT="regexp:%\{(.|\n)*?%}"

    WHITESPACE="regexp:\s+"
  ]
}

root ::= (statement (";" statement)*)*

statement ::= STRING_LITERAL
 | number_literal


private number_literal ::=  DECIMAL_LITERAL | HEXADECIMAL_LITERAL | BINARY_LITERAL | IMAGINARY_LITERAL | "Inf" | "NaN"
