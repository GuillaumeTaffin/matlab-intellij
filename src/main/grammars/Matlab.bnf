{
  parserClass="com.github.guillaumetaffin.matlabintellij.lang.parser.MatlabParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Matlab"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.guillaumetaffin.matlabintellij.lang.psi"
  psiImplPackage="com.github.guillaumetaffin.matlabintellij.lang.psi.impl"

  elementTypeHolderClass="com.github.guillaumetaffin.matlabintellij.lang.psi.MatlabTypes"
  elementTypeClass="com.github.guillaumetaffin.matlabintellij.lang.psi.MatlabElementType"
  tokenTypeClass="com.github.guillaumetaffin.matlabintellij.lang.psi.MatlabTokenType"

  parserImports=[
        "static com.github.guillaumetaffin.matlabintellij.lang.psi.Tokens.*"
  ]

  generateTokens=false
  extends(".*_expr")=expr
  extends(".*_statement")=statement

  tokens = [
    SEMICOLON=";"
    INF="Inf"
    NAN="NaN"
    TRUE="true"
    FALSE="false"
    EQ="=="
    NOT_EQ="~="
    LTEQ="<="
    GTEQ=">="
    LT="<"
    GT=">"
    PLUS="+"
    MINUS="-"
    MUL="*"
    DIV="/"
    POW="^"
    EWPOW=".^"
    EWMUL=".*"
    EWDIV="./"
    EWLDIV=".\\"
    AND_AND="&&"
    OR_OR="||"
    AND="&"
    OR="|"
    EQUALS="="
    LPAREN="("
    RPAREN=")"
    DOT="."
    COMMA=","
    COLON=":"
    SINGLE_QUOTE="'"
    DOUBLE_WOTE="\""
    LBRACKET="["
    RBRACKET="]"
    LBRACE="{"
    RBRACE="}"
    TILDE="~"
    AT="@"
    BANG="!"
    BREAK="break"
    CASE="case"
    CATCH="catch"
    CLASSDEF="classdef"
    CONTINUE="continue"
    ELSE="else"
    ELSEIF="elseif"
    END="end"
    FOR="for"
    FUNCTION="function"
    GLOBAL="global"
    IF="if"
    OTHERWISE="otherwise"
    PARFOR="parfor"
    PERSISTENT="persistent"
    RETURN="return"
    SPMD="spmd"
    SWITCH="switch"
    TRY="try"
    WHILE="while"
    BACKSLASH="\\"
    THREE_DOTS="..."
    IDENTIFIER="regexp:[a-zA-Z_][a-zA-Z0-9_]*"
    STRING_LITERAL="regexp:'([^']|'')*'|\"([^\"]|\"\")*\""
    DECIMAL_LITERAL="regexp:\b(\d+)(\.\d+)?([eE][+-]?\d+)?\b"
    HEXADECIMAL_LITERAL="regexp:\b0[xX][0-9a-fA-F]+\b"
    BINARY_LITERAL="regexp:\b0[bB][01]+\b"
    IMAGINARY_LITERAL="regexp:\b(\d+)?(\.\d+)?([eE][+-]?\d+)?[ij]\b"
    LINE_COMMENT="regexp:%.*"
    MULTI_LINE_COMMENT="regexp:%\{(.|\n)*?%}"

    WHITE_SPACE="regexp:[ \t\x0B\f]+"
    LINE_BREAK="regexp:[\r\n\u2028\u2029]+"
  ]
}

root ::= script_statement* statement?


script_statement ::= whitespace? statement? whitespace? statement_separator

statement_separator ::= ";" whitespace? LINE_BREAK? | LINE_BREAK

statement ::= assign_statement
        | if_statement
        | for_statement
        | function_command_invoke_statement
        | (!"end" expr)

expr ::= parens_expr
       | relational_group
       | logical_and_group
       | logical_or_group
       | range_expr
       | add_group
       | mul_group
       | pow_group
       | unary_group
       | primary_group

assign_statement ::= (multi_id_array | ref_call_expr) whitespace? "=" whitespace? expr
id ::= IDENTIFIER
function_command_invoke_statement ::= ref_id whitespace !("=" | parens_expr) whitespace? word (whitespace word)*
word ::= any_text+
private any_text::= id | literal_expr | function_invoke_included_symbols
function_invoke_included_symbols ::= "(" | ")" | "^" | "=" | "<" | ">" | "|" | "&" | "~"
    | "break" | "case" | "catch" | "classdef" | "continue" | "else" | "elseif" | "end" | "for" | "function" | "global" | "if" | "otherwise" | "parfor" | "persistent" | "return" | "spmd" | "switch" | "try" | "while"
    | "true" | "false" | "NaN" | "Inf" | "+" | "-" | "*" | "/" | "\\" | "."| ".*" | "./" | ".\\" | "==" | "~=" | "<=" | ">=" "&&" | "||" | "," | ";" | ":" | "'" | "[" | "]" | "{" | "}" | "@" | "!"

multi_id_array ::= "[" whitespace? multi_id (whitespace? ","? whitespace? multi_id)* whitespace? "]"
multi_id ::= id | "~"

if_statement ::= if_condition if_block else_if_clause* else_clause? block_end
if_block ::= script_statement*
block_end ::= whitespace? "end"
if_condition ::= "if" whitespace? expr whitespace? statement_separator
else_if_clause ::= "elseif" else_if_block
else_if_block ::= script_statement*
else_clause ::= "else" else_block
else_block ::= script_statement*

for_statement ::= for_condition for_block block_end
for_condition ::= "for" whitespace? assign_statement whitespace? statement_separator
for_block ::= script_statement*

private primary_group ::= literal_expr | ref_call_expr | array_expr | continuation_expr
private unary_group ::= unary_plus_expr | unary_minus_expr | transpose_expr
private pow_group ::= pow_expr | ewpow_expr
private mul_group ::= mul_expr | div_expr | ewmul_expr | ewdiv_expr | ewldiv_expr
private add_group ::= plus_expr | minus_expr
private relational_group ::= eq_expr | not_eq_expr | lteq_expr | gteq_expr | lt_expr | gt_expr
private logical_and_group ::= and_expr | andand_expr
private logical_or_group ::= or_expr | oror_expr

literal_expr ::= STRING_LITERAL | number_literal | boolean_literal | "end" | ":"
ref_id ::= id
parens_expr ::= "(" whitespace? expr whitespace? ")"
ref_call_expr ::= ref_id (whitespace? "(" whitespace? function_call_args whitespace? ")")?
function_call_args ::= expr ( whitespace? "," whitespace? expr )*
array_expr ::= "[" whitespace? expr (whitespace? ("," | ";")? whitespace? expr)* whitespace? "]"
range_expr ::= expr whitespace? ":" whitespace? expr (whitespace? ":" whitespace? expr)?
continuation_expr ::= expr whitespace? "..." whitespace? LINE_BREAK whitespace? expr

unary_plus_expr ::= "+" whitespace? expr
unary_minus_expr ::= "-" whitespace? expr
transpose_expr ::= expr "'"

plus_expr ::= expr whitespace? "+" whitespace? expr
minus_expr ::= expr whitespace? "-" whitespace? expr
mul_expr ::= expr whitespace? "*" whitespace? expr
div_expr ::= expr whitespace? "/" whitespace? expr
pow_expr ::= expr whitespace? "^" whitespace? expr
ewpow_expr ::= expr whitespace? ".^" whitespace? expr
ewmul_expr ::= expr whitespace? ".*" whitespace? expr
ewdiv_expr ::= expr whitespace? "./" whitespace? expr
ewldiv_expr ::= expr whitespace? ".\\" whitespace? expr

eq_expr ::= expr whitespace? "==" whitespace? expr
not_eq_expr ::= expr whitespace? "~=" whitespace? expr
lteq_expr ::= expr whitespace? "<=" whitespace? expr
gteq_expr ::= expr whitespace? ">=" whitespace? expr
lt_expr ::= expr whitespace? "<" whitespace? expr
gt_expr ::= expr whitespace? ">" whitespace? expr

andand_expr ::= expr whitespace? "&&" whitespace? expr
oror_expr ::= expr whitespace? "||" whitespace? expr
and_expr ::= expr whitespace? "&" whitespace? expr
or_expr ::= expr whitespace? "|" whitespace? expr

// Literals
private number_literal ::=  DECIMAL_LITERAL | HEXADECIMAL_LITERAL | BINARY_LITERAL | IMAGINARY_LITERAL | "Inf" | "NaN"
private boolean_literal ::= "true" | "false"
private whitespace ::= WHITE_SPACE
