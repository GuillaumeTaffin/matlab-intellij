{
  parserClass="com.github.guillaumetaffin.matlabintellij.lang.parser.MatlabParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Matlab"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.guillaumetaffin.matlabintellij.lang.psi"
  psiImplPackage="com.github.guillaumetaffin.matlabintellij.lang.psi.impl"

  elementTypeHolderClass="com.github.guillaumetaffin.matlabintellij.lang.psi.MatlabTypes"
  elementTypeClass="com.github.guillaumetaffin.matlabintellij.lang.psi.MatlabElementType"
  tokenTypeClass="com.github.guillaumetaffin.matlabintellij.lang.psi.MatlabTokenType"

  parserImports=[
        "static com.github.guillaumetaffin.matlabintellij.lang.psi.Tokens.*"
  ]

  generateTokens=false
  extends(".*_expr")=expr

  tokens = [
    SEMICOLON=";"
    INF="Inf"
    NAN="NaN"
    TRUE="true"
    FALSE="false"
    EQ="=="
    NOT_EQ="~="
    LTEQ="<="
    GTEQ=">="
    LT="<"
    GT=">"
    PLUS="+"
    MINUS="-"
    MUL="*"
    DIV="/"
    POW="^"
    EWPOW=".^"
    EWMUL=".*"
    EWDIV="./"
    EWLDIV=".\\"
    AND_AND="&&"
    OR_OR="||"
    AND="&"
    OR="|"
    EQUALS="="
    IDENTIFIER="regexp:[a-zA-Z_][a-zA-Z0-9_]*"
    STRING_LITERAL="regexp:'([^']|'')*'|\"([^\"]|\"\")*\""
    DECIMAL_LITERAL="regexp:\b(\d+)(\.\d+)?([eE][+-]?\d+)?\b"
    HEXADECIMAL_LITERAL="regexp:\b0[xX][0-9a-fA-F]+\b"
    BINARY_LITERAL="regexp:\b0[bB][01]+\b"
    IMAGINARY_LITERAL="regexp:\b(\d+)?(\.\d+)?([eE][+-]?\d+)?[ij]\b"
    LINE_COMMENT="regexp:%.*"
    MULTI_LINE_COMMENT="regexp:%\{(.|\n)*?%}"

    WHITESPACE="regexp:\s+"
  ]
}

root ::= (statement_with_semi | statement)*

statement_with_semi ::= statement ";"

statement ::= expr
       | assign_statement

expr ::= primary_group
       | unary_group
       | pow_group
       | mul_group
       | add_group
       | relational_group
       | logical_and_group
       | logical_or_group

assign_statement ::= id "=" expr
id ::= IDENTIFIER


private primary_group ::= literal_expr
private unary_group ::= unary_plus_expr | unary_minus_expr
private pow_group ::= pow_expr | ewpow_expr
private mul_group ::= mul_expr | div_expr | ewmul_expr | ewdiv_expr | ewldiv_expr
private add_group ::= plus_expr | minus_expr
private relational_group ::= eq_expr | not_eq_expr | lteq_expr | gteq_expr | lt_expr | gt_expr
private logical_and_group ::= and_expr | andand_expr
private logical_or_group ::= or_expr | oror_expr

literal_expr ::= STRING_LITERAL | number_literal | boolean_literal

unary_plus_expr ::= "+" expr
unary_minus_expr ::= "-" expr

plus_expr ::= expr "+" expr
minus_expr ::= expr "-" expr
mul_expr ::= expr "*" expr
div_expr ::= expr "/" expr
pow_expr ::= expr "^" expr
ewpow_expr ::= expr ".^" expr
ewmul_expr ::= expr ".*" expr
ewdiv_expr ::= expr "./" expr
ewldiv_expr ::= expr ".\\" expr

eq_expr ::= expr "==" expr
not_eq_expr ::= expr "~=" expr
lteq_expr ::= expr "<=" expr
gteq_expr ::= expr ">=" expr
lt_expr ::= expr "<" expr
gt_expr ::= expr ">" expr

andand_expr ::= expr "&&" expr
oror_expr ::= expr "||" expr
and_expr ::= expr "&" expr
or_expr ::= expr "|" expr

// Literals
private number_literal ::=  DECIMAL_LITERAL | HEXADECIMAL_LITERAL | BINARY_LITERAL | IMAGINARY_LITERAL | "Inf" | "NaN"
private boolean_literal ::= "true" | "false"
